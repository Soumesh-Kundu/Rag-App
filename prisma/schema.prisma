// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NEXT_DB_URL")
  shadowDatabaseUrl = env("NEXT_SHADOW_DB_URL")
}
//enums
enum TokenType{
  verify
  password
  share
}
enum Role{
  owner
  editor
  viewer
  commentor
}

enum ChatRole{
  assistant
  user
  system
}
//model schemas
model Users{
  id Int @id @default(autoincrement())
  name String @db.VarChar(255) 
  email String @db.VarChar(255) @unique 
  password String? @db.VarChar(255)
  image String?
  verified Boolean @default(false)

  //relations
  tokens Tokens[]
  repos Access_Repo[]
  comments Comments[]
}

model Tokens{
  id Int @id @default(autoincrement())
  userid Int 
  repoid Int?
  role Role?
  type TokenType
  expiresIn DateTime 

  user Users @relation(fields: [userid], references: [id])
  @@unique([userid,type,repoid],name:"unique_token") 
}

model Repos{
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
  created_at DateTime @default(now())
  nameSpace String @unique @default(uuid()) @db.Uuid

  //relations
  users Access_Repo[]
  messages Messages[]
}

model Messages{
  id Int @id @default(autoincrement())
  threadId Int 
  content String 
  createdAt DateTime @default(now())
  role ChatRole
  data Json? @db.Json
  //relations
  repo Repos @relation(fields: [threadId], references: [id],onDelete: Cascade)
  comments Comments[]
}

model Comments{
  id Int @id @default(autoincrement())
  messageId Int
  text String
  createdAt DateTime @default(now())
  userId Int

  //relations
  user Users @relation(fields: [userId], references: [id])
  message Messages @relation(fields: [messageId], references: [id],onDelete: Cascade)
}

model Access_Repo{
  userid Int
  repoid Int
  role Role @default(owner)

  //relations
  user Users @relation(fields: [userid], references: [id])
  repo Repos @relation(fields: [repoid], references: [id],onDelete: Cascade)

  @@id([userid,repoid])
}